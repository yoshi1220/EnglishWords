@page "/lesslearning"
@inject IEnglishWordService EnglishWordService
@inject IRecordService RecordService

<PageTitle>Learning</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">学習回数の少ない単語</MudText>
@if (reviewMode)
{
    <MudText Typo="Typo.h5" GutterBottom="true"><strong>復習モード</strong></MudText>
}

<br />


<MudText>周回数: @record.Count, 学習単語数: @(count + 1) / @englishWords.Count </MudText>
<br />

<MudText><strong>単語:</strong>&nbsp;&nbsp; @word</MudText>
<br />


@if (dispResult == true)
{
    <MudText><strong>意味:</strong>&nbsp;&nbsp; @meaning</MudText>
}
else
{
    <MudText><strong>意味: </strong></MudText>
}

<br />
<br />
<br />

@if (dispResult == false)
{
    <button type="button" class="btn btn-primary" @onclick="ShowResult">意味の表示</button>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="ShowNext">分かった！</button>
    <button type="button" class="btn btn-secondary" @onclick="ShowNextByMistake">分からない</button>
}


@code {
    private List<EnglishWord> englishWords;
    private List<EnglishWord> mistakenWords = new List<EnglishWord>();
    private Record record;

    private List<int> randomNumbers;
    private EnglishWord singleWord;
    private string word;
    private string meaning;
    private int count = 0;

    private bool dispResult = false;
    private bool reviewMode = false;

    protected override void OnInitialized()
    {
        //英単語一覧の取得
        var maxStudyCount = EnglishWordService.GetAll().Max(n => n.StudyCount);
        englishWords = EnglishWordService.GetAll().Where(n => n.StudyCount <= (maxStudyCount / 2)).ToList();

        //周回数の取得
        record = RecordService.Get(1);


        //表示順の乱数取得
        randomNumbers = GetUniqRandomNumbersEasy(0, englishWords.Count - 1, englishWords.Count).ToList();


        //初期単語の表示
        singleWord = englishWords[randomNumbers[count]];
        word = singleWord.Word;
        meaning = singleWord.Meaning;

    }

    private void ShowResult()
    {
        dispResult = true;
        this.StateHasChanged();
    }

    private void ShowNext()
    {

        //学習回数を更新
        singleWord.StudyCount++;
        EnglishWordService.Update(singleWord, singleWord.Id);

        //次の単語に進む
        ForwardNextWord();

        //次の単語の情報をセット
        singleWord = englishWords[randomNumbers[count]];
        word = singleWord.Word;
        meaning = singleWord.Meaning;
        dispResult = false;
        this.StateHasChanged();
    }

    private void ShowNextByMistake()
    {
        //間違った単語を保存
        mistakenWords.Add(singleWord);

        //学習回数を更新
        singleWord.StudyCount++;

        //間違えた回数を更新
        singleWord.MistakenCount++;
        EnglishWordService.Update(singleWord, singleWord.Id);

        //次の単語に進む
        ForwardNextWord();

        //次の単語の情報をセット
        singleWord = englishWords[randomNumbers[count]];
        word = singleWord.Word;
        meaning = singleWord.Meaning;
        dispResult = false;
        this.StateHasChanged();
    }

    private void ForwardNextWord()
    {
        count++;
        if (count == englishWords.Count)
        {
            count = 0;

            if (!IsCompletedAllWord())
            {
                reviewMode = true;
                return;
            }
            else
            {
                reviewMode = false;
                //英単語一覧の取得
                var maxStudyCount = EnglishWordService.GetAll().Max(n => n.StudyCount);
                englishWords = EnglishWordService.GetAll().Where(n => n.StudyCount <= (maxStudyCount / 2)).ToList();
                
                //表示順の乱数取得
                randomNumbers = GetUniqRandomNumbersEasy(0, englishWords.Count - 1, englishWords.Count).ToList();                

                //周回数の更新
                record.Count++;
                RecordService.Update(record, 1);
            }
        }
    }

    private bool IsCompletedAllWord()
    {
        if (mistakenWords.Count == 0)
        {
            return true;
        }

        englishWords = new List<EnglishWord>(mistakenWords);
        randomNumbers = GetUniqRandomNumbersEasy(0, englishWords.Count - 1, englishWords.Count).ToList();
        mistakenWords = new List<EnglishWord>();

        return false;
    }

    /// <summary>
    /// 指定範囲で、重複のない乱数を生成する
    /// </summary>
    /// <param name="rangeBegin"></param>
    /// <param name="rangeEnd"></param>
    /// <param name="count"></param>
    /// <returns></returns>
    IEnumerable<int> GetUniqRandomNumbersEasy(int rangeBegin, int rangeEnd, int count)
    {
        // 指定された範囲の整数で埋めたリストを用意する
        List<int> work
          = Enumerable.Range(rangeBegin, rangeEnd - rangeBegin + 1).ToList();

        // workからランダムに取り出して、順に返していく（count回繰り返す）
        var rnd = new Random();
        for (int i = 0; i < count; i++)
        {
            // workからランダムに1つ選んで値を取り出す
            int pos = rnd.Next(0, work.Count);
            int value = work[pos];
            work.RemoveAt(pos); // 取り出した値はリストから取り去る

            // 取り出した値を順に返す
            yield return value;
        }
    }
}