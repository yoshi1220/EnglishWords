@page "/"
@inject IEnglishWordService EnglishWordService

<PageTitle>Learning</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">English Words Test used in WPF 4.5 Unleashed</MudText>
<br />


<MudText>周回数: @laps, 学習単語数: @(count + 1) / @englishWords.Count </MudText>
<br />

<MudText Typo="Typo.h5" GutterBottom="true">@word</MudText>
<br />

@if (dispResult == false)
{
    <button type="button" class="btn btn-primary" @onclick="ShowResult">表示</button>
}
else
{
    <button type="button" class="btn btn-secondary" @onclick="ShowNext">次</button>
}

<br />
<br />

@if (dispResult == true)
{
    <MudText Typo="Typo.h5" GutterBottom="true">@meaning</MudText>
}




@code {
    private List<EnglishWord> englishWords;
    private List<int> randomNumbers;
    private EnglishWord singleWord;
    private string word;
    private string meaning;
    private int count = 0;
    private int laps = 1;

    private bool dispResult = false;

    protected override void OnInitialized()
    {
        //英単語一覧の取得
        englishWords = EnglishWordService.GetAll().ToList();

        //表示順の乱数取得
        randomNumbers = GetUniqRandomNumbersEasy(0, englishWords.Count - 1, englishWords.Count).ToList();


        //初期単語の表示
        singleWord = englishWords[randomNumbers[count]];
        word = singleWord.Word;
        meaning = singleWord.Meaning;

    }

    private void ShowResult()
    {
        dispResult = true;
        this.StateHasChanged();
    }

    private void ShowNext()
    {
        count++;
        if (count == englishWords.Count)
        {
            count = 0;
            laps++;
        }

        //次の単語の情報をセット
        singleWord = englishWords[randomNumbers[count]];
        word = singleWord.Word;
        meaning = singleWord.Meaning;
        dispResult = false;
        this.StateHasChanged();
    }

    /// <summary>
    /// 指定範囲で、重複のない乱数を生成する
    /// </summary>
    /// <param name="rangeBegin"></param>
    /// <param name="rangeEnd"></param>
    /// <param name="count"></param>
    /// <returns></returns>
    IEnumerable<int> GetUniqRandomNumbersEasy(int rangeBegin, int rangeEnd, int count)
    {
        // 指定された範囲の整数で埋めたリストを用意する
        List<int> work
          = Enumerable.Range(rangeBegin, rangeEnd - rangeBegin + 1).ToList();

        // workからランダムに取り出して、順に返していく（count回繰り返す）
        var rnd = new Random();
        for (int i = 0; i < count; i++)
        {
            // workからランダムに1つ選んで値を取り出す
            int pos = rnd.Next(0, work.Count);
            int value = work[pos];
            work.RemoveAt(pos); // 取り出した値はリストから取り去る

            // 取り出した値を順に返す
            yield return value;
        }
    }
}